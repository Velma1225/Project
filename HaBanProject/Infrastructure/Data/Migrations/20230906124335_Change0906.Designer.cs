// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(HaBanContext))]
    [Migration("20230906124335_Change0906")]
    partial class Change0906
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.AddressDetail", b =>
                {
                    b.Property<int>("AddressDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressDetailId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10, 8)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(11, 8)");

                    b.HasKey("AddressDetailId")
                        .HasName("PK_Addresses");

                    b.HasIndex(new[] { "DistrictId" }, "IX_AddressDetails_DistrictID");

                    b.ToTable("AddressDetails");

                    b.HasData(
                        new
                        {
                            AddressDetailId = 1,
                            Address = "新北市永和區中正路179之1號及181號2樓",
                            DistrictId = 1,
                            Latitude = 24.99905m,
                            Longitude = 121.51681m
                        },
                        new
                        {
                            AddressDetailId = 2,
                            Address = "台北市大安區敦化南路二段77號12樓",
                            DistrictId = 2,
                            Latitude = 25.03042m,
                            Longitude = 121.54925m
                        },
                        new
                        {
                            AddressDetailId = 3,
                            Address = "履歷1的地址",
                            DistrictId = 2,
                            Latitude = 24.98977m,
                            Longitude = 121.51039m
                        },
                        new
                        {
                            AddressDetailId = 4,
                            Address = "履歷2的地址",
                            DistrictId = 2,
                            Latitude = 24.98977m,
                            Longitude = 121.51039m
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.AddressRelation", b =>
                {
                    b.Property<int>("AddressRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressRelationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressRelationId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int?>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("JobDescriptionID");

                    b.Property<int?>("ResumeId")
                        .HasColumnType("int")
                        .HasColumnName("ResumeID");

                    b.HasKey("AddressRelationId")
                        .HasName("PK_AddressRealations");

                    b.HasIndex(new[] { "AddressId" }, "IX_AddressRelations_AddressID");

                    b.ToTable("AddressRelations");

                    b.HasData(
                        new
                        {
                            AddressRelationId = 1,
                            AddressId = 1,
                            CompanyId = 1,
                            JobDescriptionId = 1
                        },
                        new
                        {
                            AddressRelationId = 2,
                            AddressId = 2,
                            CompanyId = 2,
                            JobDescriptionId = 2
                        },
                        new
                        {
                            AddressRelationId = 3,
                            AddressId = 3,
                            ResumeId = 1
                        },
                        new
                        {
                            AddressRelationId = 4,
                            AddressId = 4,
                            ResumeId = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationRecord", b =>
                {
                    b.Property<int>("ApplicationRecordId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationRecordID");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("CandidateID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("InterviewStatus")
                        .HasColumnType("bit");

                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("JobDescriptionID");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ResumeSnapshotId")
                        .HasColumnType("int")
                        .HasColumnName("ResumeSnapshotID");

                    b.HasKey("ApplicationRecordId");

                    b.HasIndex(new[] { "CandidateId" }, "IX_ApplicationRecords_CandidateID");

                    b.HasIndex(new[] { "CompanyId" }, "IX_ApplicationRecords_CompanyID");

                    b.HasIndex(new[] { "JobDescriptionId" }, "IX_ApplicationRecords_JobDescriptionID");

                    b.HasIndex(new[] { "ResumeSnapshotId" }, "IX_ApplicationRecords_ResumeSnapshotID");

                    b.ToTable("ApplicationRecords");

                    b.HasData(
                        new
                        {
                            ApplicationRecordId = 1,
                            CandidateId = 1,
                            CompanyId = 1,
                            CreateAt = new DateTime(2023, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewStatus = true,
                            JobDescriptionId = 1,
                            ReadStatus = true,
                            ResumeSnapshotId = 1
                        },
                        new
                        {
                            ApplicationRecordId = 2,
                            CandidateId = 2,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewStatus = false,
                            JobDescriptionId = 2,
                            ReadStatus = false,
                            ResumeSnapshotId = 2
                        },
                        new
                        {
                            ApplicationRecordId = 3,
                            CandidateId = 2,
                            CompanyId = 1,
                            CreateAt = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewStatus = false,
                            JobDescriptionId = 1,
                            ReadStatus = false,
                            ResumeSnapshotId = 3
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.BoostOrder", b =>
                {
                    b.Property<int>("BoostOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BoostOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoostOrderId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("DueAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BoostOrderId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_BoostOrders_CompanyID");

                    b.ToTable("BoostOrders");

                    b.HasData(
                        new
                        {
                            BoostOrderId = 1,
                            CompanyId = 1,
                            DueAt = new DateTime(2023, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Online = false,
                            OrderAt = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1800,
                            Quantity = 1
                        },
                        new
                        {
                            BoostOrderId = 2,
                            CompanyId = 2,
                            DueAt = new DateTime(2023, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Online = false,
                            OrderAt = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 3600,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.BoostUsed", b =>
                {
                    b.Property<int>("BoostUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BoostUsedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoostUsedId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("JobDescriptionID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime");

                    b.HasKey("BoostUsedId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_BoostUsed_CompanyID");

                    b.ToTable("BoostUsed", (string)null);

                    b.HasData(
                        new
                        {
                            BoostUsedId = 1,
                            CompanyId = 1,
                            JobDescriptionId = 1,
                            Quantity = 1,
                            UnitPrice = 1800,
                            UsedAt = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BoostUsedId = 2,
                            CompanyId = 2,
                            JobDescriptionId = 2,
                            Quantity = 1,
                            UnitPrice = 1800,
                            UsedAt = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BoostUsedId = 3,
                            CompanyId = 2,
                            JobDescriptionId = 3,
                            Quantity = 1,
                            UnitPrice = 1800,
                            UsedAt = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CandidateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateId"));

                    b.Property<string>("CandidateAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhotoURL");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            CandidateId = 1,
                            CandidateAccount = "F112233447",
                            CreateAt = new DateTime(2023, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mary@gmail.com",
                            Gender = 2,
                            MobilePhone = "0988888888",
                            Name = "王瑪莉",
                            Password = "Mary87654321",
                            PhotoUrl = "Candidate-0001.png"
                        },
                        new
                        {
                            CandidateId = 2,
                            CandidateAccount = "F443322111",
                            CreateAt = new DateTime(2023, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Leo@gmail.com",
                            Gender = 1,
                            MobilePhone = "0966666666",
                            Name = "黃小明",
                            Password = "Leo87654321",
                            PhotoUrl = "Candidate-0002.jpg"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("CandidateID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("JobDescriptionID");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("SenderAccount")
                        .HasColumnType("bit");

                    b.HasKey("MessageId");

                    b.HasIndex(new[] { "CandidateId" }, "IX_ChatMessages_CandidateID");

                    b.HasIndex(new[] { "CompanyId" }, "IX_ChatMessages_CompanyID");

                    b.ToTable("ChatMessages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            CandidateId = 1,
                            CompanyId = 1,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescriptionId = 1,
                            MessageContent = "請問職缺的詳細工作內容有哪些?",
                            ReadStatus = true,
                            SenderAccount = true
                        },
                        new
                        {
                            MessageId = 2,
                            CandidateId = 2,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescriptionId = 2,
                            MessageContent = "請問是否對本公司職缺有興趣?",
                            ReadStatus = false,
                            SenderAccount = false
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "基隆市",
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "台北市",
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "新北市",
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "桃園市",
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "新竹市",
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "新竹縣",
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.CollectionCompany", b =>
                {
                    b.Property<int>("CollectionCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollectionCompanyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionCompanyId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("CandidateID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.HasKey("CollectionCompanyId");

                    b.HasIndex(new[] { "CandidateId" }, "IX_CollectionCompanies_CandidateID");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CollectionCompanies_CompanyID");

                    b.ToTable("CollectionCompanies");

                    b.HasData(
                        new
                        {
                            CollectionCompanyId = 1,
                            CandidateId = 1,
                            CompanyId = 1,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CollectionCompanyId = 2,
                            CandidateId = 2,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.CollectionJob", b =>
                {
                    b.Property<int>("CollectionJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollectionJobID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionJobId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("CandidateID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("JobDescriptionID");

                    b.HasKey("CollectionJobId");

                    b.HasIndex(new[] { "CandidateId" }, "IX_CollectionJobs_CandidateID");

                    b.HasIndex(new[] { "JobDescriptionId" }, "IX_CollectionJobs_JobDescriptionID");

                    b.ToTable("CollectionJobs");

                    b.HasData(
                        new
                        {
                            CollectionJobId = 1,
                            CandidateId = 1,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescriptionId = 1
                        },
                        new
                        {
                            CollectionJobId = 2,
                            CandidateId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescriptionId = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("BoostNumber")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FreeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            BoostNumber = 0,
                            CompanyAccount = "77881234",
                            CompanyName = "王品餐飲股份有限公司",
                            CompanyPhone = "0911222333",
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "wowprime@gmail.com",
                            FreeDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoUrl = "wowprime.png",
                            MembershipDate = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "wowprime87654321"
                        },
                        new
                        {
                            CompanyId = 2,
                            BoostNumber = 1,
                            CompanyAccount = "88774321",
                            CompanyName = "永慶房產集團(永慶房屋仲介股份有限公司)",
                            CompanyPhone = "0955333222",
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yungching@gmail.com",
                            FreeDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoUrl = "yungching.png",
                            MembershipDate = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "yungching87654321"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyFeatureCategory", b =>
                {
                    b.Property<int>("CompanyFeatureCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyFeatureCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyFeatureCategoryId"));

                    b.Property<string>("CompanyFeatureCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyFeatureCategoryId")
                        .HasName("PK_CompanyWelfareCategories");

                    b.ToTable("CompanyFeatureCategory", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyFeatureCategoryId = 1,
                            CompanyFeatureCategoryName = "上市櫃公司",
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyFeatureCategoryId = 2,
                            CompanyFeatureCategoryName = "外商公司",
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyFeatureCategoryId = 3,
                            CompanyFeatureCategoryName = "進修補助",
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyFeatureCategoryId = 4,
                            CompanyFeatureCategoryName = "員購優惠",
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyFeatureRelation", b =>
                {
                    b.Property<int>("CompanyFeatureRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyFeatureRelationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyFeatureRelationId"));

                    b.Property<int>("CompanyFeatureCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyFeatureCategoryID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyFeatureRelationId")
                        .HasName("PK_CompanyWelfare");

                    b.HasIndex(new[] { "CompanyFeatureCategoryId" }, "IX_CompanyFeatureRelations_CompanyFeatureCategoryID");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyFeatureRelations_CompanyID");

                    b.ToTable("CompanyFeatureRelations");

                    b.HasData(
                        new
                        {
                            CompanyFeatureRelationId = 1,
                            CompanyFeatureCategoryId = 1,
                            CompanyId = 1,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyFeatureRelationId = 2,
                            CompanyFeatureCategoryId = 2,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyProfile", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Gift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("IndustryCategoryID");

                    b.Property<string>("Insurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("WelfareDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex(new[] { "IndustryCategoryId" }, "IX_CompanyProfiles_IndustryCategoryID");

                    b.ToTable("CompanyProfiles");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            Address = "台中市西區台灣大道2段218號29樓",
                            CompanySite = "http://www.wowprime.com/",
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fax = "暫不提供",
                            Gift = "三節禮物",
                            IndustryCategoryId = 1,
                            Insurance = "健保,勞保",
                            Introduction = "王品集團成立於1993年，全球總店數已超過400家，餐廳經營發展跨足不同類型，包括西式、日式、中式、火鍋、燒肉等領域，致力於多品牌經營與服務創新，不斷精進與突破，躍居台灣第一大餐飲集團，成為同業標竿，被譽為餐飲業經營的典範。<br />\r\n<br />\r\n王品集團多年的努力和表現，受到許多獎項的肯定，於國際廚藝競賽中獲獎超過50座，屢獲天下雜誌、遠見雜誌服務業大調查評選第一名，並榮獲台灣經濟部頒發優良品牌獎。<br />\r\n<br />\r\n王品集團擁有優質的企業文化與連鎖餐飲管理制度，歡迎有志從事餐飲業的伙伴加入，與我們一起實現偉大願景，傳遞餐桌上的美味關係，成為最具影響力的餐飲集團。<br />\r\n<br />\r\n<br />\r\n【反詐騙聲明】<br />\r\n提醒您，本網站僅提供應徵服務，履歷來源由求職者主動應徵或系統配對，不會要求您在面試前提供其他個人資料，履歷資料僅限王品集團台灣關係企業使用；面試地點將會安排在總部、各門店、公立就業服務機構或其他公共場地。若接獲冒用王品集團之名義要求提供個人資料或至可疑地點面試等，請來信至hr@wowprime.com&nbsp;或客服信箱service@wowprime.com，或與警政署「反詐騙諮詢專線165」查詢，謝謝。<br />\r\n<br />\r\n經營理念<br />\r\n1.【顧客是恩人】：以「熱忱」的心『款待』顧客。　<br />\r\n2.【同仁是家人】：以「關懷」的心『了解』同仁。　<br />\r\n3.【廠商是貴人】：以「尊重」的心『面對』廠商。</div>",
                            PersonnelContact = "黃小姐",
                            ProductContent = "【台灣事業群】<br />\r\n王品牛排：www.wangsteak.com.tw<br />\r\nTASTy西堤牛排：www.tasty.com.tw<br />\r\n陶板屋和風創作料理：www.tokiya.com.tw<br />\r\n原燒優質原味燒肉：www.yakiyan.com<br />\r\n聚北海道昆布鍋：www.giguo.com.tw<br />\r\n藝奇新日本料理：www.ikki.com.tw<br />\r\n夏慕尼新香榭鉄板燒：www.chamonix.com.tw<br />\r\n品田牧場日式豬排咖哩：www.pinnada.com.tw<br />\r\n石二鍋&nbsp;石頭鍋.涮涮鍋：www.12hotpot.com.tw<br />\r\nhot&nbsp;7新鉄板料理：www.hot-7.com<br />\r\nPUTIEN&nbsp;莆田-新加坡最佳亞洲餐廳：www.putien.com.tw<br />\r\n青花驕&nbsp;麻辣鍋：www.chinhuajiao.com<br />\r\n享鴨&nbsp;烤鴨與中華料理：www.xiangduck.com.tw<br />\r\n丰禾台式小館：www.veggtable.com<br />",
                            StaffQuantity = 9000,
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WelfareDesc = "【薪滿意足】&nbsp;<br />\r\n月月有感-具競爭力的薪資、全勤獎金、績效獎金、每月晉升機會、管理津貼、技能津貼*、外語津貼*、夜間津貼*<br />\r\n年年滿足-每年2次績效調薪機會、年終獎金(視營運狀況發放)<br />\r\n不定期-內部推薦獎勵*&nbsp;<br />\r\n<br />\r\n【安心保障】&nbsp;<br />\r\n法定保障-勞保、健保、勞退提撥&nbsp;<br />\r\n公司保障-團保、定期健康檢查&nbsp;<br />\r\n貼心保障-結婚及生育禮金、孕婦友善工作環境、同仁重大傷病慰問金*&nbsp;<br />\r\n<br />\r\n【專屬為你】&nbsp;<br />\r\n即享樂-同仁及家人用餐八折優惠、上班免費供餐*&nbsp;<br />\r\n獨享樂-正職加碼放鬆假&nbsp;每年多4天!&nbsp;三節禮券、生日祝福餐、同仁及同仁子女教育獎學金*<br />\r\n眾享樂-國外旅遊補助、尾牙活動、不定期歡聚活動、除夕公休*&nbsp;<br />\r\n<br />\r\n【實力升級】&nbsp;<br />\r\n系統化培訓課程-集團訓練、事業處訓練、門店訓練<br />\r\n線上學習平台-王品wow!學院<br />\r\n其它-專業證照/執照輔導、外部教育訓練費用補助*、鼓勵在職進修<br />\r\n<br />\r\n【同仁國內外旅遊足跡】&nbsp;<br />\r\n2016-&nbsp;關島、西班牙&nbsp;<br />\r\n2017-&nbsp;首爾、大阪、北歐四國<br />\r\n2018-&nbsp;新加坡、四國、克羅埃西亞<br />\r\n2019-&nbsp;泰國、九州、土耳其<br />\r\n2020-&nbsp;宜蘭龜山島、花蓮太魯閣、台南墾丁、金門<br />\r\n2021-&nbsp;阿里山、小琉球<br />\r\n2022-&nbsp;環島、澎湖、台東<br />\r\n2023-&nbsp;馬來西亞、日本關西、土耳其<br />\r\n<br />\r\n【新鐵人養成計畫】&nbsp;<br />\r\n初級養成-日行萬步好健康&nbsp;<br />\r\n進階挑戰-鐵騎貫寶島、泳渡日月潭、半程馬拉松、登玉山&nbsp;<br />\r\n超級挑戰-聖母峰基地營登山活動(EBC)&nbsp;<br />\r\n<br />\r\n【計時人員&nbsp;享福又給利】&nbsp;<br />\r\n認真享全勤&nbsp;-&nbsp;達出勤標準即享津貼1,000元起&nbsp;<br />\r\n快樂享津貼&nbsp;-&nbsp;國定假日出勤雙薪&nbsp;<br />\r\n安心享休假&nbsp;-&nbsp;法定給薪休假(特休假等….)&nbsp;<br />\r\n一起享獎金&nbsp;–&nbsp;每月績效獎金、年終獎金(視營運狀況發放)<br />\r\n相聚享歡樂&nbsp;-&nbsp;國外旅遊補助、不定期歡聚活動、尾牙活動<br />\r\n<br />\r\n&nbsp;(*)星號表示依各事業處規定;上述福利(含國內外旅遊)等視整體營運或環境狀況公司保留調整權利。"
                        },
                        new
                        {
                            CompanyId = 2,
                            Address = "台北市大安區敦化南路二段77號12樓",
                            CompanySite = "https://www.yungching.tw/",
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fax = "暫不提供",
                            Gift = "三節禮物",
                            IndustryCategoryId = 1,
                            Insurance = "健保,勞保",
                            Introduction = "【永慶房產集團五大第一】<br />\r\n■全台第一大房仲集團，全台店數突破1600家<br />\r\n房仲第一品牌&nbsp;-&nbsp;永慶房產集團於1988年正式成立，迄今已超過30年，一路走來，不斷致力於推動交易安全及發展e化服務系統與工具，滿足消費者安心購售屋及提升交易效率的基本需求，並積極整合集團資源，拓展市場規模，除提供客戶各項不動產仲介及諮詢的全方位服務外，更建構全國龐大且綿密的門市通路網絡，將永慶的服務深入社區、扎根基層。集團旗下共有直營品牌永慶房屋，及四個加盟品牌：永慶不動產、永義房屋、有巢氏房屋、台慶不動產等五個品牌，集團全台店數突破1600店，是台灣最大的房產集團。<br />\r\n<br />\r\n■第一位推動「新式仲介」的領航者<br />\r\n孫慶餘董事長從美日引進「新式仲介」主張不賺差價，只收取固定服務費，改變房仲的格局與遊戲規則；創立台灣第一個房仲加盟平台：大台北不動產仲介聯盟(現住商不動產的前身)&nbsp;，推動產業進入「房仲1.0-新式仲介時代」。後成立永慶房屋，投入十年推動《不動產仲介經紀業管理條例》立法通過，並不斷創新服務推動產業升級，帶領產業進入「房仲2.0-法制仲介時代」。<br />\r\n<br />\r\n■第一家獲頒「地政貢獻獎」的業者<br />\r\n在孫董事長的帶領下，永慶房產集團以「先誠實再成交」的核心理念，以提供消費者一個「公平的房產交易平台」為己任。為了落實對消費者的承諾，永慶房屋在不僅在2007年時率先於永慶房仲網上率先公開成交行情，並主動提供成交資訊給政府，因此促成「實價登錄1.0」於2012年立法成功。孫慶餘董事長也在2014年，因協助推動《不動產經紀業管理條例》立法、主動提供成交資訊，讓實價登錄政策順利實施、推動新式仲介、法制仲介到科技仲介，引領產業進步，成為台灣第一位獲得地政貢獻獎的房仲業者。<br />\r\n<br />\r\n■第一家揭露成交行情至門牌的業者<br />\r\n2019年「實價登錄2.0」於立法院闖關失敗，永慶房屋領先政府及同業，率先推「實價登錄3.0－成交行情揭露至門牌」，並陸續推至集團下所有房仲品牌，深獲各界認同。永慶房屋2020年8月，永慶房屋再推「兩大誠實房價保證」，承諾若未能落實提供成交行情揭露至門牌，造成客戶損失，永慶房屋將做出賠償，此創舉贏得客戶讚賞更震撼業界。<br />\r\n<br />\r\n■唯一提供消費者買賣屋「全保障」<br />\r\n2021年9月，永慶房屋再創買賣屋保障新標竿！重磅推出「真房價保證」服務，保證不炒房不賺差價，若未落實最高將賠償買方400萬元；賠償賣方最高四倍服務費，用實際的行動和服務，展現「房仲第一品牌」保障消費者權益的決心，以落實孫慶餘董事長為消費者打造公平房產交易平台的承諾，推升產業進入「房仲3.0-誠實仲介時代」。",
                            PersonnelContact = "鄭小姐",
                            ProductContent = "■營運版圖橫跨房產、仲介、網路,服務一次到位,職涯發展空間更寬廣<br />\r\n<br />\r\n永慶房產事業集團橫跨三大事業群及永慶慈善基金會,提供客戶房地產上中下游的完整服務,集團內完善的升遷制度,則讓每一個永慶的同仁,都可依自己的興趣、專長,擁有更寬闊的一片天。<br />\r\n<br />\r\n【直營事業體】(永慶房屋、首席顧問團隊、永慶豪宅、永慶店面)<br />\r\n-不動產買賣仲介服務<br />\r\n-不動產租賃仲介服務<br />\r\n-不動產處理顧問諮詢服務<br />\r\n<br />\r\n【加盟事業體】(永慶不動產、有巢氏房屋、台慶不動產、永義房屋)<br />\r\n-加盟品牌授權、營運輔導<br />\r\n<br />\r\n【代銷事業體】(永慶代銷)<br />\r\n-預售屋推案、企劃銷售、餘屋銷售及現場管理業務<br />\r\n<br />\r\n【建設事業體】(永慶建設)<br />\r\n-土地開發、都市更新、建築管理等業務<br />\r\n<br />\r\n【交安事業體】(永慶代書)<br />\r\n-產權審查<br />\r\n-代書服務(簽約簽訂、成交過戶、銀行貸款設定、節稅規劃)<br />\r\n-不動產交易簽證及契約鑑證<br />\r\n-不動產徵信及評估<br />\r\n-不動產買賣履約保證<br />\r\n<br />\r\n【網路事業體】(永慶房仲網)&nbsp;<br />\r\n-提供房產物件、居家裝潢、修繕服務搜尋&nbsp;<br />\r\n-提供物件成交行情,涵蓋全台各縣市、行政區到社區大樓等<br />\r\n<br />\r\n【永慶慈善基金會】<br />\r\n-推廣全齡通用住宅,倡導通用生活、居住平權<br />\r\n-推動無障礙觀念,照顧身心障礙者<br />\r\n-扶助社會弱勢人口,協助改善生活現況<br />\r\n-喚醒大眾對弱勢之重視,爭取必要的社會資源<br />\r\n-發揮人間的溫暖情誼,創造盡善盡美的生活環境",
                            StaffQuantity = 3000,
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WelfareDesc = "■&nbsp;兼顧工作與生活的真幸福，在永慶房屋找到幸福的新定義<br />\r\n<br />\r\n「有幸福的員工，才有滿意的客戶！」<br />\r\n除了對消費者的服務，更持續「致力打造友善職場」，透過學長姐輔導、師徒達人制度，建立團隊合作共享的職場文化；善用創新科技及企業優勢，成功推動彈性工作8小時制度，讓員工能夠工作與生活平衡；有感的薪獎福利，提供業界最優保障前12個月每月5萬元收入、每人每年最高250萬「幸福成家基金」；以能力為導向的月月晉升制度，成為房仲業唯一連續六年獲得HR&nbsp;Asia「亞洲最佳企業雇主獎」肯定(<a style=\"display: inline;\" href=\"https://house.udn.com/house/story/11067/7311723\" rel=\"ugc nofollow\" target=\"_blank\">https://house.udn.com/house/story/11067/7311723</a>)&nbsp;，同時，更連續11年獲得「台灣服務業大評鑑」連鎖服務業金獎的肯定。<br />\r\n<br />\r\n《永慶，真的不一樣》<br />\r\n聰明工作，高效率、完善培訓<br />\r\n經紀人員彈性工作8小時、搭配遊戲化制度，工作高效率。<br />\r\nI&nbsp;pad行動服務工具，協助經紀人員快速上手、即時提供房產服務。<br />\r\n完整教育訓練，另更補助指派受訓及經核准之內外訓課程。<br />\r\n輔導考取不動產經紀人國家證照。<br />\r\n慰勞員工之年終獎金，依公司營運狀況及年資、職級及個人表現之不同提供。<br />\r\n行政績優同仁可獲頒考核獎金及獎牌、獎座。<br />\r\n經紀人員除薪資及業績獎金外，公司定期舉辦激勵活動獎勵，提供高額獎金。<br />\r\n<br />\r\n【健康生活，打造幸福職場】<br />\r\n-提供經紀人員最高250萬元的購屋基金，圓三年購屋夢。<br />\r\n-海內外獎勵旅遊，生活更多采。&nbsp;<br />\r\n-免費紓壓按摩，員工好放鬆。<br />\r\n-生日津貼、三節禮金/禮券，員工好窩心。<br />\r\n<br />\r\n【團隊合作，打造歸屬感】<br />\r\n-專屬學長學姊制，帶領新人上手。<br />\r\n-首創聯賣系統，同仁互相幫忙不藏私。<br />\r\n-團隊合作創高績效，經紀人除可獲得個人業績獎金，還可分配團體獎金。<br />\r\n-多元社團活動，如籃球賽、壘球賽、羽球賽，紓解工作壓力。<br />\r\n-員工休息室與聯誼廳，平日紓壓打氣，互相交流情感。<br />\r\n<br />\r\n【成家到安家，幸福百分百】<br />\r\n-舉辦大型尾牙，及免費返鄉專車。<br />\r\n-鼓勵班對，在永慶一圓成功及成家的夢想。<br />\r\n-提供經紀人員租屋補助、購置機車、ipad之無息貸款，打拼更安心。<br />\r\n-導入EAP員工協助方案，舉辦「幸福講座」，分享交流生活點滴。<br />\r\n-提供勞保、健保及團保(意外傷害、住院醫療及意外險)多重的保障。"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("DistrictId");

                    b.HasIndex(new[] { "CityId" }, "IX_Districts_CityID");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "松山區"
                        },
                        new
                        {
                            DistrictId = 2,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "信義區"
                        },
                        new
                        {
                            DistrictId = 3,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "大安區"
                        },
                        new
                        {
                            DistrictId = 4,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "中山區"
                        },
                        new
                        {
                            DistrictId = 5,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "中正區"
                        },
                        new
                        {
                            DistrictId = 6,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "大同區"
                        },
                        new
                        {
                            DistrictId = 7,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "萬華區"
                        },
                        new
                        {
                            DistrictId = 8,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "文山區"
                        },
                        new
                        {
                            DistrictId = 9,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "南港區"
                        },
                        new
                        {
                            DistrictId = 10,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "內湖區"
                        },
                        new
                        {
                            DistrictId = 11,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "士林區"
                        },
                        new
                        {
                            DistrictId = 12,
                            CityId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictName = "北投區"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.EmployeeCategory", b =>
                {
                    b.Property<int>("EmployeeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeCategoryId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("EmployeeCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IndustryCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("IndustryCategoryID");

                    b.HasKey("EmployeeCategoryId");

                    b.HasIndex(new[] { "IndustryCategoryId" }, "IX_EmployeeCategories_IndustryCategoryID");

                    b.ToTable("EmployeeCategories");

                    b.HasData(
                        new
                        {
                            EmployeeCategoryId = 1,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "餐飲類人員",
                            IndustryCategoryId = 1
                        },
                        new
                        {
                            EmployeeCategoryId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "旅遊休閒類人員",
                            IndustryCategoryId = 1
                        },
                        new
                        {
                            EmployeeCategoryId = 3,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "美容美髮類人員",
                            IndustryCategoryId = 1
                        },
                        new
                        {
                            EmployeeCategoryId = 4,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "軟體/工程類人員",
                            IndustryCategoryId = 2
                        },
                        new
                        {
                            EmployeeCategoryId = 5,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "MIS／網管類人員",
                            IndustryCategoryId = 2
                        },
                        new
                        {
                            EmployeeCategoryId = 6,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "客戶服務類人員",
                            IndustryCategoryId = 3
                        },
                        new
                        {
                            EmployeeCategoryId = 7,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "門市營業類人員",
                            IndustryCategoryId = 3
                        },
                        new
                        {
                            EmployeeCategoryId = 8,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "業務銷售類人員",
                            IndustryCategoryId = 3
                        },
                        new
                        {
                            EmployeeCategoryId = 9,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "貿易類人員",
                            IndustryCategoryId = 3
                        },
                        new
                        {
                            EmployeeCategoryId = 10,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "操作／技術類人員",
                            IndustryCategoryId = 4
                        },
                        new
                        {
                            EmployeeCategoryId = 11,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "維修／技術服務類人員",
                            IndustryCategoryId = 4
                        },
                        new
                        {
                            EmployeeCategoryId = 12,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "醫療專業類人員",
                            IndustryCategoryId = 5
                        },
                        new
                        {
                            EmployeeCategoryId = 13,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryName = "醫療／保健服務人員",
                            IndustryCategoryId = 5
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.EnvironmentPic", b =>
                {
                    b.Property<int>("EnvironmentPicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnvironmentPicID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnvironmentPicId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("EnvironmentPicPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("EnvironmentPicId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_EnvironmentPics_CompanyID");

                    b.ToTable("EnvironmentPics");

                    b.HasData(
                        new
                        {
                            EnvironmentPicId = 1,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentPicPath = "house_environPic_1.jpg",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EnvironmentPicId = 2,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentPicPath = "house_environPic_2.jpg",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EnvironmentPicId = 3,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentPicPath = "house_environPic_3.jpg",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.IndustryCategory", b =>
                {
                    b.Property<int>("IndustryCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndustryCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryCategoryId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("IndustryCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("IndustryCategoryId");

                    b.ToTable("IndustryCategories");

                    b.HasData(
                        new
                        {
                            IndustryCategoryId = 1,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndustryCategoryName = "餐飲／旅遊 ／美容美髮類",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IndustryCategoryId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndustryCategoryName = "資訊軟體系統類",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IndustryCategoryId = 3,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndustryCategoryName = "客服／門市／業務／貿易類",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IndustryCategoryId = 4,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndustryCategoryName = "操作／技術／維修類",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IndustryCategoryId = 5,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndustryCategoryName = "醫療/保健服務類",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCategoryId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeCategoryID");

                    b.Property<string>("JobCategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobCategoryId");

                    b.HasIndex(new[] { "EmployeeCategoryId" }, "IX_JobCategories_EmployeeCategoryID");

                    b.ToTable("JobCategories");

                    b.HasData(
                        new
                        {
                            JobCategoryId = 1,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 1,
                            JobCategoryName = "廚師"
                        },
                        new
                        {
                            JobCategoryId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 1,
                            JobCategoryName = "服務員"
                        },
                        new
                        {
                            JobCategoryId = 3,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 1,
                            JobCategoryName = "麵包師"
                        },
                        new
                        {
                            JobCategoryId = 4,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 2,
                            JobCategoryName = "飯店工作人員"
                        },
                        new
                        {
                            JobCategoryId = 5,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 2,
                            JobCategoryName = "領隊/導遊"
                        },
                        new
                        {
                            JobCategoryId = 6,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 2,
                            JobCategoryName = "空服/地勤人員"
                        },
                        new
                        {
                            JobCategoryId = 7,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 3,
                            JobCategoryName = "美容/美髮師"
                        },
                        new
                        {
                            JobCategoryId = 8,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 3,
                            JobCategoryName = "醫美諮詢師"
                        },
                        new
                        {
                            JobCategoryId = 9,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 3,
                            JobCategoryName = "美甲師"
                        },
                        new
                        {
                            JobCategoryId = 10,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 4,
                            JobCategoryName = "軟體工程師"
                        },
                        new
                        {
                            JobCategoryId = 11,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 4,
                            JobCategoryName = "資料工程師"
                        },
                        new
                        {
                            JobCategoryId = 12,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 4,
                            JobCategoryName = "Android/iOS工程師"
                        },
                        new
                        {
                            JobCategoryId = 13,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 5,
                            JobCategoryName = "系統工程師"
                        },
                        new
                        {
                            JobCategoryId = 14,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 5,
                            JobCategoryName = "網路管理工程師"
                        },
                        new
                        {
                            JobCategoryId = 15,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 5,
                            JobCategoryName = "資安工程師"
                        },
                        new
                        {
                            JobCategoryId = 16,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 6,
                            JobCategoryName = "電話客服"
                        },
                        new
                        {
                            JobCategoryId = 17,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 6,
                            JobCategoryName = "文字客服"
                        },
                        new
                        {
                            JobCategoryId = 18,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 7,
                            JobCategoryName = "門市/店員/專櫃人員"
                        },
                        new
                        {
                            JobCategoryId = 19,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 7,
                            JobCategoryName = "售票/收銀人員"
                        },
                        new
                        {
                            JobCategoryId = 20,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 8,
                            JobCategoryName = "電話行銷人員"
                        },
                        new
                        {
                            JobCategoryId = 21,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 8,
                            JobCategoryName = "不動產經紀人"
                        },
                        new
                        {
                            JobCategoryId = 22,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 8,
                            JobCategoryName = "國內外業務人員"
                        },
                        new
                        {
                            JobCategoryId = 23,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 9,
                            JobCategoryName = "船務/報關人員"
                        },
                        new
                        {
                            JobCategoryId = 24,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 9,
                            JobCategoryName = "國貿人員"
                        },
                        new
                        {
                            JobCategoryId = 25,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 10,
                            JobCategoryName = "作業員/包裝員"
                        },
                        new
                        {
                            JobCategoryId = 26,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 10,
                            JobCategoryName = "電機工程技術員"
                        },
                        new
                        {
                            JobCategoryId = 27,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 10,
                            JobCategoryName = "領班"
                        },
                        new
                        {
                            JobCategoryId = 28,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 11,
                            JobCategoryName = "產品維修人員"
                        },
                        new
                        {
                            JobCategoryId = 29,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 11,
                            JobCategoryName = "電機裝修工"
                        },
                        new
                        {
                            JobCategoryId = 30,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 11,
                            JobCategoryName = "汽車/機車技術人員"
                        },
                        new
                        {
                            JobCategoryId = 31,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 12,
                            JobCategoryName = "醫師"
                        },
                        new
                        {
                            JobCategoryId = 32,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 12,
                            JobCategoryName = "藥師"
                        },
                        new
                        {
                            JobCategoryId = 33,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 12,
                            JobCategoryName = "護理師及護士"
                        },
                        new
                        {
                            JobCategoryId = 34,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 13,
                            JobCategoryName = "按摩/推拿師"
                        },
                        new
                        {
                            JobCategoryId = 35,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 13,
                            JobCategoryName = "診所助理"
                        },
                        new
                        {
                            JobCategoryId = 36,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeCategoryId = 13,
                            JobCategoryName = "醫院行政管理人員"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobDescription", b =>
                {
                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("JobDescriptionID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BoostEndAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("ComputerSkill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("DrivingLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationId")
                        .HasColumnType("int")
                        .HasColumnName("EducationID");

                    b.Property<int>("EmploymentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("EmploymentCategoryID");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("JobCategoryID");

                    b.Property<string>("JobDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("JobID");

                    b.Property<int>("JobShiftId")
                        .HasColumnType("int")
                        .HasColumnName("JobShiftID");

                    b.Property<int>("JobTenureId")
                        .HasColumnType("int")
                        .HasColumnName("JobTenureID");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxSalary")
                        .HasColumnType("int");

                    b.Property<int?>("MinSalary")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostEndAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PostScript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PostStartAt")
                        .HasColumnType("datetime");

                    b.Property<int>("SalaryPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("SalaryPaymentID");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("VacancyNumber")
                        .HasColumnType("int");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobDescriptionId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_JobDescriptions_CompanyID");

                    b.HasIndex(new[] { "JobCategoryId" }, "IX_JobDescriptions_JobCategoryID");

                    b.ToTable("JobDescriptions");

                    b.HasData(
                        new
                        {
                            JobDescriptionId = 1,
                            Address = "新北市永和區中正路179之1號及181號2樓",
                            BoostEndAt = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            ComputerSkill = "[{\"HTML\":\"false\"},{\"CSS\":\"false\"},{\"JS\":\"false\"},{\"C#\":\"false\"},{\"SQL\":\"false\"}]",
                            ContactAddress = "新北市永和區中正路179之1號及181號2樓",
                            ContactEmail = "wp_lee@gmail.com",
                            ContactName = "李小姐",
                            ContactPhone = "0912-345-678",
                            CreateAt = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 1,
                            DrivingLicense = "[{\"汽車\":\"false\"},{\"機車\":\"true\"}]",
                            EducationId = 1,
                            EmploymentCategoryId = 1,
                            IsManager = false,
                            IsPosted = true,
                            JobCategoryId = 1,
                            JobDetail = "各項餐點製作、內場相關事務等",
                            JobId = "aaa111",
                            JobShiftId = 2,
                            JobTenureId = 1,
                            JobTitle = "陶板屋永和中正店-廚藝助理",
                            Language = "[{\"英語\":\"false\"},{\"日語\":\"false\"},{\"台語\":\"true\"}]",
                            MaxSalary = 250,
                            MinSalary = 200,
                            PostEndAt = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostScript = "即日起提供【視訊面試】選項 ，履歷經初審通過後，由專人電話連繫安排面試，讓你在家求職安心防疫。",
                            PostStartAt = new DateTime(2023, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalaryPaymentId = 1,
                            UpdateAt = new DateTime(2023, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VacancyNumber = 1,
                            WorkingHours = "10:00~14:00 及 16:30~21:30"
                        },
                        new
                        {
                            JobDescriptionId = 2,
                            Address = "台北市大安區敦化南路二段77號12樓",
                            BoostEndAt = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 2,
                            ComputerSkill = "[{\"HTML\":\"true\"},{\"CSS\":\"true\"},{\"JS\":\"true\"},{\"C#\":\"false\"},{\"SQL\":\"true\"}]",
                            ContactAddress = "台北市大安區敦化南路二段77號12樓",
                            ContactEmail = "yc_chang@gmail.com",
                            ContactName = "張先生",
                            ContactPhone = "0912-345-678",
                            CreateAt = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 2,
                            DrivingLicense = "[{\"汽車\":\"false\"},{\"機車\":\"false\"}]",
                            EducationId = 2,
                            EmploymentCategoryId = 1,
                            IsManager = true,
                            IsPosted = true,
                            JobCategoryId = 10,
                            JobDetail = "使用 C# 程式語言開發\r\n- 運用 ASP.NET Framework MVC、ASP.NET Core MVC、Web API 架構\r\n- 運用 Dapper、Entity Framework等 ORM 框架\r\n- 採用 TDD、DDD、DI、IoC、分層設計等開發方法論",
                            JobId = "bbb222",
                            JobShiftId = 1,
                            JobTenureId = 2,
                            JobTitle = "ASP.NET MVC C# 網站後端工程師",
                            Language = "[{\"英語\":\"true\"},{\"日語\":\"false\"},{\"台語\":\"true\"}]",
                            MaxSalary = 70000,
                            MinSalary = 40000,
                            PostEndAt = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostScript = "請直接透過網站上的「我要應徵」進行應徵，可加快處理速度，讓您更快得到回覆。",
                            PostStartAt = new DateTime(2023, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalaryPaymentId = 2,
                            UpdateAt = new DateTime(2023, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VacancyNumber = 2,
                            WorkingHours = "08:30-18:00"
                        },
                        new
                        {
                            JobDescriptionId = 3,
                            Address = "台北市信義區市府路45號",
                            BoostEndAt = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            ComputerSkill = "[{\"HTML\":\"false\"},{\"CSS\":\"false\"},{\"JS\":\"false\"},{\"C#\":\"false\"},{\"SQL\":\"false\"}]",
                            ContactAddress = "新北市永和區中正路179之1號及181號2樓",
                            ContactEmail = "wp_lee@gmail.com",
                            ContactName = "李小姐",
                            ContactPhone = "0912-345-678",
                            CreateAt = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 1,
                            DrivingLicense = "[{\"汽車\":\"false\"},{\"機車\":\"true\"}]",
                            EducationId = 1,
                            EmploymentCategoryId = 1,
                            IsManager = false,
                            IsPosted = true,
                            JobCategoryId = 1,
                            JobDetail = "各項餐點製作、內場相關事務等",
                            JobId = "ccc333",
                            JobShiftId = 2,
                            JobTenureId = 1,
                            JobTitle = "西堤信義101店-主廚",
                            Language = "[{\"英語\":\"false\"},{\"日語\":\"false\"},{\"台語\":\"true\"}]",
                            MaxSalary = 280,
                            MinSalary = 200,
                            PostEndAt = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostScript = "即日起提供【視訊面試】選項 ，履歷經初審通過後，由專人電話連繫安排面試，讓你在家求職安心防疫。",
                            PostStartAt = new DateTime(2023, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalaryPaymentId = 1,
                            UpdateAt = new DateTime(2023, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VacancyNumber = 1,
                            WorkingHours = "10:00~14:00 及 16:30~21:30"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobFeature", b =>
                {
                    b.Property<int>("JobFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobFeatureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobFeatureId"));

                    b.Property<string>("JobFeatures")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobFeatureId");

                    b.ToTable("JobFeatures");

                    b.HasData(
                        new
                        {
                            JobFeatureId = 1,
                            JobFeatures = "國外駐點工作"
                        },
                        new
                        {
                            JobFeatureId = 2,
                            JobFeatures = "彈性上下班"
                        },
                        new
                        {
                            JobFeatureId = 3,
                            JobFeatures = "交通津貼"
                        },
                        new
                        {
                            JobFeatureId = 4,
                            JobFeatures = "伙食津貼"
                        },
                        new
                        {
                            JobFeatureId = 5,
                            JobFeatures = "週休二日"
                        },
                        new
                        {
                            JobFeatureId = 6,
                            JobFeatures = "無須輪班"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobFeaturesRelation", b =>
                {
                    b.Property<int>("JobFeaturesRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobFeaturesRelationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobFeaturesRelationId"));

                    b.Property<int?>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("JobDescriptionID");

                    b.Property<int?>("JobFeatureId")
                        .HasColumnType("int")
                        .HasColumnName("JobFeatureID");

                    b.HasKey("JobFeaturesRelationId");

                    b.HasIndex(new[] { "JobDescriptionId" }, "IX_JobFeaturesRelations_JobDescriptionID");

                    b.HasIndex(new[] { "JobFeatureId" }, "IX_JobFeaturesRelations_JobFeatureID");

                    b.ToTable("JobFeaturesRelations");

                    b.HasData(
                        new
                        {
                            JobFeaturesRelationId = 1,
                            JobDescriptionId = 1,
                            JobFeatureId = 2
                        },
                        new
                        {
                            JobFeaturesRelationId = 2,
                            JobDescriptionId = 1,
                            JobFeatureId = 3
                        },
                        new
                        {
                            JobFeaturesRelationId = 3,
                            JobDescriptionId = 1,
                            JobFeatureId = 4
                        },
                        new
                        {
                            JobFeaturesRelationId = 4,
                            JobDescriptionId = 2,
                            JobFeatureId = 1
                        },
                        new
                        {
                            JobFeaturesRelationId = 5,
                            JobDescriptionId = 2,
                            JobFeatureId = 2
                        },
                        new
                        {
                            JobFeaturesRelationId = 6,
                            JobDescriptionId = 2,
                            JobFeatureId = 5
                        },
                        new
                        {
                            JobFeaturesRelationId = 7,
                            JobDescriptionId = 2,
                            JobFeatureId = 6
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.MembershipCategory", b =>
                {
                    b.Property<int>("MembershipCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MembershipCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipCategoryId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int");

                    b.Property<string>("MembershipName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalDate")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("MembershipCategoryId");

                    b.ToTable("MembershipCategories");

                    b.HasData(
                        new
                        {
                            MembershipCategoryId = 1,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 2800,
                            MembershipName = "月繳/30天",
                            TotalDate = 30,
                            UnitPrice = 4200
                        },
                        new
                        {
                            MembershipCategoryId = 2,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 5200,
                            MembershipName = "季繳/90天",
                            TotalDate = 120,
                            UnitPrice = 9000
                        },
                        new
                        {
                            MembershipCategoryId = 3,
                            CreateAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 18000,
                            MembershipName = "年繳/365天",
                            TotalDate = 455,
                            UnitPrice = 32000
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.MembershipOrder", b =>
                {
                    b.Property<int>("MembershipOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MembershipOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipOrderId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("DueAt")
                        .HasColumnType("datetime");

                    b.Property<int>("MembershipCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MembershipCategoryID");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("MembershipOrderId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_MembershipOrders_CompanyID");

                    b.ToTable("MembershipOrders");

                    b.HasData(
                        new
                        {
                            MembershipOrderId = 1,
                            CompanyId = 1,
                            DueAt = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembershipCategoryId = 1,
                            Online = true,
                            OrderAt = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnitPrice = 2800
                        },
                        new
                        {
                            MembershipOrderId = 2,
                            CompanyId = 2,
                            DueAt = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembershipCategoryId = 2,
                            Online = true,
                            OrderAt = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnitPrice = 5200
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.RecentlyViewedJob", b =>
                {
                    b.Property<int>("RecentlyViewedJobsId")
                        .HasColumnType("int")
                        .HasColumnName("RecentlyViewedJobsID");

                    b.Property<DateTime>("BrowsingTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CandidateId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CandidateID");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("JobID");

                    b.HasKey("RecentlyViewedJobsId");

                    b.ToTable("RecentlyViewedJobs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Resume", b =>
                {
                    b.Property<int>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResumeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResumeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Autobiography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("CandidateID");

                    b.Property<string>("ComputerSkill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationId")
                        .HasColumnType("int")
                        .HasColumnName("EducationID");

                    b.Property<int>("EmploymentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("EmploymentCategoryID");

                    b.Property<string>("GraduationSchool")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorIn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("OpenOrClosed")
                        .HasColumnType("bit");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("ResumeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("ResumeId");

                    b.HasIndex(new[] { "CandidateId" }, "IX_Resumes_CandidateID");

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            Address = "台北市大安區",
                            Age = 28,
                            Autobiography = "我是國立臺北科技大學資訊工程系的學生。我充滿活力，精通英語和台語，並擅長HTML、JS和CSS。我的熱情和專業知識準備好為您的團隊貢獻。我期待著與您共同創造成功的未來！",
                            CandidateId = 1,
                            ComputerSkill = "[{\"HTML\":\"true\"},{\"CSS\":\"true\"},{\"JS\":\"true\"},{\"C#\":\"false\"},{\"SQL\":\"false\"}]",
                            CreateAt = new DateTime(2023, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrivingLicense = "[{\"汽車\":\"true\"},{\"機車\":\"true\"}]",
                            EducationId = 2,
                            EmploymentCategoryId = 1,
                            GraduationSchool = "國立臺北科技大學",
                            Language = "[{\"英語\":\"true\"},{\"日語\":\"false\"},{\"台語\":\"true\"}]",
                            MajorIn = "資訊工程系",
                            OpenOrClosed = true,
                            Rank = 1,
                            ResumeName = "我的履歷",
                            UpdateAt = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ResumeId = 2,
                            Address = "台北市大安區",
                            Age = 28,
                            Autobiography = "我是一位資訊工程系的學生，充滿求知慾望。除了流利的英語和台語，我還擁有軟體工程師實習的經驗，以及在超商當店員的實際工作經驗。這些經驗讓我具備團隊合作、問題解決和溝通技能。我期待在您的團隊中貢獻我的多元背景和積極態度。",
                            CandidateId = 1,
                            ComputerSkill = "[{\"HTML\":\"true\"},{\"CSS\":\"true\"},{\"JS\":\"true\"},{\"C#\":\"false\"},{\"SQL\":\"false\"}]",
                            CreateAt = new DateTime(2023, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrivingLicense = "[{\"汽車\":\"true\"},{\"機車\":\"true\"}]",
                            EducationId = 2,
                            EmploymentCategoryId = 1,
                            GraduationSchool = "國立臺北科技大學",
                            Language = "[{\"英語\":\"true\"},{\"日語\":\"false\"},{\"台語\":\"true\"}]",
                            MajorIn = "資訊工程系",
                            OpenOrClosed = false,
                            Rank = 2,
                            ResumeName = "備用履歷",
                            UpdateAt = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ResumeId = 3,
                            Address = "新北市新店區",
                            Age = 35,
                            Autobiography = "我是國立臺灣大學外國語文學系的學生，熟練英語、日語，並精通JS、C#和SQL。我充滿熱情，渴望為您的團隊帶來價值，一同追求卓越。期待與您攜手實現成功！",
                            CandidateId = 2,
                            ComputerSkill = "[{\"HTML\":\"false\"},{\"CSS\":\"false\"},{\"JS\":\"true\"},{\"C#\":\"true\"},{\"SQL\":\"true\"}]",
                            CreateAt = new DateTime(2023, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrivingLicense = "[{\"汽車\":\"false\"},{\"機車\":\"true\"}]",
                            EducationId = 2,
                            EmploymentCategoryId = 2,
                            GraduationSchool = "國立臺灣大學",
                            Language = "[{\"英語\":\"true\"},{\"日語\":\"true\"},{\"台語\":\"false\"}]",
                            MajorIn = "外國語文學系",
                            OpenOrClosed = true,
                            Rank = 1,
                            ResumeName = "我的履歷",
                            UpdateAt = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResumeSnapshot", b =>
                {
                    b.Property<int>("ResumeSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResumeSnapshotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResumeSnapshotId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationRecordId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationRecordID");

                    b.Property<string>("Autobiography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerSkill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationId")
                        .HasColumnType("int")
                        .HasColumnName("EducationID");

                    b.Property<int>("EmploymentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("EmploymentCategoryID");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GraduationSchool")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorIn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResumeSnapshotId");

                    b.HasIndex(new[] { "ApplicationRecordId" }, "IX_ResumeSnapshots_ApplicationRecordID");

                    b.ToTable("ResumeSnapshots");

                    b.HasData(
                        new
                        {
                            ResumeSnapshotId = 1,
                            Address = "台北市大安區",
                            Age = 28,
                            ApplicationRecordId = 1,
                            Autobiography = "我是國立臺北科技大學資訊工程系的學生。我充滿活力，精通英語和台語，並擅長HTML、JS和CSS。我的熱情和專業知識準備好為您的團隊貢獻。我期待著與您共同創造成功的未來！",
                            ComputerSkill = "[{\"HTML\":\"true\"},{\"CSS\":\"true\"},{\"JS\":\"true\"},{\"C#\":\"false\"},{\"SQL\":\"false\"}]",
                            DrivingLicense = "[{\"汽車\":\"true\"},{\"機車\":\"true\"}]",
                            EducationId = 2,
                            EmploymentCategoryId = 1,
                            Gender = 2,
                            GraduationSchool = "國立臺北科技大學",
                            Language = "[{\"英語\":\"true\"},{\"日語\":\"false\"},{\"台語\":\"true\"}]",
                            MajorIn = "資訊工程系",
                            Name = "王瑪莉",
                            PhotoUrl = "Candidate-0001.png"
                        },
                        new
                        {
                            ResumeSnapshotId = 2,
                            Address = "新北市新店區",
                            Age = 35,
                            ApplicationRecordId = 2,
                            Autobiography = "我是國立臺灣大學外國語文學系的學生，熟練英語、日語，並精通JS、C#和SQL。我充滿熱情，渴望為您的團隊帶來價值，一同追求卓越。期待與您攜手實現成功！",
                            ComputerSkill = "[{\"HTML\":\"false\"},{\"CSS\":\"false\"},{\"JS\":\"true\"},{\"C#\":\"true\"},{\"SQL\":\"true\"}]",
                            DrivingLicense = "[{\"汽車\":\"false\"},{\"機車\":\"true\"}]",
                            EducationId = 2,
                            EmploymentCategoryId = 2,
                            Gender = 1,
                            GraduationSchool = "國立臺灣大學",
                            Language = "[{\"英語\":\"true\"},{\"日語\":\"true\"},{\"台語\":\"false\"}]",
                            MajorIn = "外國語文學系",
                            Name = "黃小明",
                            PhotoUrl = "Candidate-0002.jpg"
                        },
                        new
                        {
                            ResumeSnapshotId = 3,
                            Address = "新北市新店區",
                            Age = 35,
                            ApplicationRecordId = 3,
                            Autobiography = "我是國立臺灣大學外國語文學系的學生，熟練英語、日語，並精通JS、C#和SQL。我充滿熱情，渴望為您的團隊帶來價值，一同追求卓越。期待與您攜手實現成功！",
                            ComputerSkill = "[{\"HTML\":\"false\"},{\"CSS\":\"false\"},{\"JS\":\"true\"},{\"C#\":\"true\"},{\"SQL\":\"true\"}]",
                            DrivingLicense = "[{\"汽車\":\"false\"},{\"機車\":\"true\"}]",
                            EducationId = 2,
                            EmploymentCategoryId = 2,
                            Gender = 1,
                            GraduationSchool = "國立臺灣大學",
                            Language = "[{\"英語\":\"true\"},{\"日語\":\"true\"},{\"台語\":\"false\"}]",
                            MajorIn = "外國語文學系",
                            Name = "黃小明",
                            PhotoUrl = "Candidate-0002.jpg"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.WorkExpSnapshot", b =>
                {
                    b.Property<int>("WorkExpSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkExpSnapshotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkExpSnapshotId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IndustryCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("IndustryCategoryID");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("JobCategoryID");

                    b.Property<int>("JobNature")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Management")
                        .HasColumnType("bit");

                    b.Property<int>("ResumeSnapshotId")
                        .HasColumnType("int")
                        .HasColumnName("ResumeSnapshotID");

                    b.Property<DateTime?>("TenureEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TenureStart")
                        .HasColumnType("datetime");

                    b.HasKey("WorkExpSnapshotId");

                    b.HasIndex(new[] { "ResumeSnapshotId" }, "IX_WorkExpSnapshots_ResumeSnapshotID");

                    b.ToTable("WorkExpSnapshots");

                    b.HasData(
                        new
                        {
                            WorkExpSnapshotId = 1,
                            CompanyName = "Build School",
                            IndustryCategoryId = 2,
                            JobCategoryId = 10,
                            JobNature = 2,
                            JobTitle = "實習軟體工程師",
                            Management = false,
                            ResumeSnapshotId = 1,
                            TenureEnd = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenureStart = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WorkExpSnapshotId = 2,
                            CompanyName = "全家超商",
                            IndustryCategoryId = 3,
                            JobCategoryId = 18,
                            JobNature = 3,
                            JobTitle = "門市店員",
                            Management = true,
                            ResumeSnapshotId = 1,
                            TenureEnd = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenureStart = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WorkExpSnapshotId = 3,
                            CompanyName = "鼎泰豐Din Tai Fung",
                            IndustryCategoryId = 1,
                            JobCategoryId = 2,
                            JobNature = 1,
                            JobTitle = "餐廳外場人員",
                            Management = false,
                            ResumeSnapshotId = 2,
                            TenureEnd = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenureStart = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkExperienceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkExperienceId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("IndustryCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("IndustryCategoryID");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("JobCategoryID");

                    b.Property<int>("JobNature")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Management")
                        .HasColumnType("bit");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int")
                        .HasColumnName("ResumeID");

                    b.Property<DateTime?>("TenureEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TenureStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex(new[] { "ResumeId" }, "IX_WorkExperiences_ResumeID");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            WorkExperienceId = 1,
                            CompanyName = "Build School",
                            CreateAt = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndustryCategoryId = 2,
                            JobCategoryId = 10,
                            JobNature = 2,
                            JobTitle = "實習軟體工程師",
                            Management = false,
                            ResumeId = 1,
                            TenureEnd = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenureStart = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WorkExperienceId = 2,
                            CompanyName = "全家超商",
                            CreateAt = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndustryCategoryId = 3,
                            JobCategoryId = 18,
                            JobNature = 3,
                            JobTitle = "門市店員",
                            Management = true,
                            ResumeId = 1,
                            TenureEnd = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenureStart = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAt = new DateTime(2023, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WorkExperienceId = 3,
                            CompanyName = "鼎泰豐Din Tai Fung",
                            CreateAt = new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndustryCategoryId = 1,
                            JobCategoryId = 2,
                            JobNature = 1,
                            JobTitle = "餐廳外場人員",
                            Management = false,
                            ResumeId = 3,
                            TenureEnd = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenureStart = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.WorkShare", b =>
                {
                    b.Property<int>("WorkShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkShareID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkShareId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("CandidateID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("JobCategoryID");

                    b.Property<string>("ShareContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("WorkShareId");

                    b.HasIndex(new[] { "CandidateId" }, "IX_WorkShares_CandidateID");

                    b.HasIndex(new[] { "CompanyId" }, "IX_WorkShares_CompanyID");

                    b.HasIndex(new[] { "JobCategoryId" }, "IX_WorkShares_JobCategoryID");

                    b.ToTable("WorkShares");

                    b.HasData(
                        new
                        {
                            WorkShareId = 1,
                            CandidateId = 1,
                            CompanyId = 1,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Evaluation = 5,
                            JobCategoryId = 1,
                            ShareContent = "有尾牙，不定期員工訓練，公司團結合作力很強",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WorkShareId = 2,
                            CandidateId = 1,
                            CompanyId = 1,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Evaluation = 4,
                            JobCategoryId = 1,
                            ShareContent = "公司福利多，同事大家都和樂融融",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WorkShareId = 3,
                            CandidateId = 1,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Evaluation = 4,
                            JobCategoryId = 1,
                            ShareContent = "三節獎金,年終獎金，品牌大，客戶優先指名，公司誠信好，同事好相處，主管親切，公司地點好，網路行銷好，員工福利好，分紅福利高，未來一片光明",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WorkShareId = 4,
                            CandidateId = 1,
                            CompanyId = 2,
                            CreateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Evaluation = 4,
                            JobCategoryId = 1,
                            ShareContent = "對於社會新鮮人給的底薪算高(50000)，學長學弟制讓新人不用擔心，學長姐直接一對一指導外加帶你出去拜訪客戶，但是抗壓性要夠強明",
                            UpdateAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.AddressDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.District", "District")
                        .WithMany("AddressDetails")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Addresses_Districts");

                    b.Navigation("District");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AddressRelation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AddressDetail", "Address")
                        .WithMany("AddressRelations")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_AddressRealations_Addresses");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationRecord", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Candidate", "Candidate")
                        .WithMany("ApplicationRecords")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationRecords_Candidates");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("ApplicationRecords")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationRecords_Companies");

                    b.HasOne("ApplicationCore.Entities.JobDescription", "JobDescription")
                        .WithMany("ApplicationRecords")
                        .HasForeignKey("JobDescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationRecords_JobDescriptions");

                    b.HasOne("ApplicationCore.Entities.ResumeSnapshot", "ResumeSnapshot")
                        .WithMany("ApplicationRecords")
                        .HasForeignKey("ResumeSnapshotId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationRecords_ResumeSnapshots");

                    b.Navigation("Candidate");

                    b.Navigation("Company");

                    b.Navigation("JobDescription");

                    b.Navigation("ResumeSnapshot");
                });

            modelBuilder.Entity("ApplicationCore.Entities.BoostOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("BoostOrders")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_BoostOrders_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApplicationCore.Entities.BoostUsed", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("BoostUseds")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_BoostUsed_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ChatMessage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Candidate", "Candidate")
                        .WithMany("ChatMessages")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatMessages_Candidates");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("ChatMessages")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatMessages_Companies");

                    b.Navigation("Candidate");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CollectionCompany", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Candidate", "Candidate")
                        .WithMany("CollectionCompanies")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionCompanies_Candidates");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("CollectionCompanies")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionCompanies_Companies");

                    b.Navigation("Candidate");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CollectionJob", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Candidate", "Candidate")
                        .WithMany("CollectionJobs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionJobs_Candidates");

                    b.HasOne("ApplicationCore.Entities.JobDescription", "JobDescription")
                        .WithMany("CollectionJobs")
                        .HasForeignKey("JobDescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionJobs_JobDescriptions");

                    b.Navigation("Candidate");

                    b.Navigation("JobDescription");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CompanyProfile", "CompanyNavigation")
                        .WithOne("Company")
                        .HasForeignKey("ApplicationCore.Entities.Company", "CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Companies_CompanyProfiles");

                    b.Navigation("CompanyNavigation");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyFeatureRelation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CompanyFeatureCategory", "CompanyFeatureCategory")
                        .WithMany("CompanyFeatureRelations")
                        .HasForeignKey("CompanyFeatureCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyFeatureRelations_CompanyFeatureCategory");

                    b.HasOne("ApplicationCore.Entities.CompanyProfile", "Company")
                        .WithMany("CompanyFeatureRelations")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyFeatureRelations_CompanyProfiles");

                    b.Navigation("Company");

                    b.Navigation("CompanyFeatureCategory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyProfile", b =>
                {
                    b.HasOne("ApplicationCore.Entities.IndustryCategory", "IndustryCategory")
                        .WithMany("CompanyProfiles")
                        .HasForeignKey("IndustryCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyProfiles_IndustryCategories");

                    b.Navigation("IndustryCategory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.District", b =>
                {
                    b.HasOne("ApplicationCore.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Districts_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EmployeeCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.IndustryCategory", "IndustryCategory")
                        .WithMany("EmployeeCategories")
                        .HasForeignKey("IndustryCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeCategories_IndustryCategories");

                    b.Navigation("IndustryCategory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EnvironmentPic", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("EnvironmentPics")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_EnvironmentPics_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.EmployeeCategory", "EmployeeCategory")
                        .WithMany("JobCategories")
                        .HasForeignKey("EmployeeCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_JobCategories_EmployeeCategories");

                    b.Navigation("EmployeeCategory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobDescription", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CompanyProfile", "Company")
                        .WithMany("JobDescriptions")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_JobDescriptions_CompanyProfiles");

                    b.HasOne("ApplicationCore.Entities.JobCategory", "JobCategory")
                        .WithMany("JobDescriptions")
                        .HasForeignKey("JobCategoryId")
                        .HasConstraintName("FK_JobDescriptions_JobCategories");

                    b.HasOne("ApplicationCore.Entities.BoostUsed", "JobDescriptionNavigation")
                        .WithOne("JobDescription")
                        .HasForeignKey("ApplicationCore.Entities.JobDescription", "JobDescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK_JobDescriptions_BoostUsed");

                    b.Navigation("Company");

                    b.Navigation("JobCategory");

                    b.Navigation("JobDescriptionNavigation");
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobFeaturesRelation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.JobDescription", "JobDescription")
                        .WithMany("JobFeaturesRelations")
                        .HasForeignKey("JobDescriptionId")
                        .HasConstraintName("FK_JobFeaturesRelations_JobDescriptions");

                    b.HasOne("ApplicationCore.Entities.JobFeature", "JobFeature")
                        .WithMany("JobFeaturesRelations")
                        .HasForeignKey("JobFeatureId")
                        .HasConstraintName("FK_JobFeaturesRelations_JobFeatures");

                    b.Navigation("JobDescription");

                    b.Navigation("JobFeature");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MembershipOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("MembershipOrders")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_MembershipOrders_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Resume", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Candidate", "Candidate")
                        .WithMany("Resumes")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_Resumes_Candidates");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WorkExpSnapshot", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ResumeSnapshot", "ResumeSnapshot")
                        .WithMany("WorkExpSnapshots")
                        .HasForeignKey("ResumeSnapshotId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkExpSnapshots_ResumeSnapshots");

                    b.Navigation("ResumeSnapshot");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WorkExperience", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Resume", "Resume")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkExperiences_Resumes");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WorkShare", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Candidate", "Candidate")
                        .WithMany("WorkShares")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkShares_Candidates");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("WorkShares")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkShares_Companies");

                    b.HasOne("ApplicationCore.Entities.JobCategory", "JobCategory")
                        .WithMany("WorkShares")
                        .HasForeignKey("JobCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkShares_JobCategories");

                    b.Navigation("Candidate");

                    b.Navigation("Company");

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AddressDetail", b =>
                {
                    b.Navigation("AddressRelations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.BoostUsed", b =>
                {
                    b.Navigation("JobDescription");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Candidate", b =>
                {
                    b.Navigation("ApplicationRecords");

                    b.Navigation("ChatMessages");

                    b.Navigation("CollectionCompanies");

                    b.Navigation("CollectionJobs");

                    b.Navigation("Resumes");

                    b.Navigation("WorkShares");
                });

            modelBuilder.Entity("ApplicationCore.Entities.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.Navigation("ApplicationRecords");

                    b.Navigation("BoostOrders");

                    b.Navigation("BoostUseds");

                    b.Navigation("ChatMessages");

                    b.Navigation("CollectionCompanies");

                    b.Navigation("EnvironmentPics");

                    b.Navigation("MembershipOrders");

                    b.Navigation("WorkShares");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyFeatureCategory", b =>
                {
                    b.Navigation("CompanyFeatureRelations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyProfile", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("CompanyFeatureRelations");

                    b.Navigation("JobDescriptions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.District", b =>
                {
                    b.Navigation("AddressDetails");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EmployeeCategory", b =>
                {
                    b.Navigation("JobCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IndustryCategory", b =>
                {
                    b.Navigation("CompanyProfiles");

                    b.Navigation("EmployeeCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobCategory", b =>
                {
                    b.Navigation("JobDescriptions");

                    b.Navigation("WorkShares");
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobDescription", b =>
                {
                    b.Navigation("ApplicationRecords");

                    b.Navigation("CollectionJobs");

                    b.Navigation("JobFeaturesRelations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.JobFeature", b =>
                {
                    b.Navigation("JobFeaturesRelations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Resume", b =>
                {
                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResumeSnapshot", b =>
                {
                    b.Navigation("ApplicationRecords");

                    b.Navigation("WorkExpSnapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
